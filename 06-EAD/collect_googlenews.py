from datetime import datetime, timedelta
import pandas as pd
from googlenews_collector import GoogleNewsCollector
import logging
import time
import os


# Configure logging
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def collect_googlenews(first_run=False):
    """
    Collect Google News articles for titles from JustWatch.
    This function reads titles from a CSV file generated by JustWatchCollector,
    collects news articles for each title using GoogleNewsCollector, and saves the results to a CSV file.
    """ 
    # Create data directory if it doesn't exist
    data_directory = 'data'
    if not os.path.exists(data_directory):
        os.makedirs(data_directory)
        logger.info(f"Created directory: {data_directory}")
        
    # Get today's date in YYYY-MM-DD format for use in filenames
    today_time = datetime.now()
    today = today_time.strftime("%Y-%m-%d")


    just_watch_csv_filename = f'{data_directory}/justwatch_{today}.csv'

    # For each content type (movie/serie) collect news from google news. Here using hidden API.
    all_googlenews_data = []
    google_news_collector = GoogleNewsCollector()
    for index, row in pd.read_csv(just_watch_csv_filename).iterrows():
        title = row['title']
        title_type = row['type']
        if title is None or pd.isna(title):
            logger.warning(f"Skipping row {index} with missing title.")
            continue
        #google_news_df = google_news_collector.collect_news(f"{type} {title}")
        if first_run: # Get news from the last 7 days
            start_date = today_time - timedelta(days=7)
            start_date = start_date.strftime("%Y-%m-%d")  # Get news from the last 7 days
        else:  # Get news from missing dates
            start_date = today
            
        #end_date = today_time + timedelta(days=1)
        #end_date = end_date.strftime("%Y-%m-%d") # get 1 day ahead for contorning API min of 2 days range even if in the future
        end_date = today
        
        google_news_df = google_news_collector.collect_news_by_date(f"{title_type} {title}", start_date, end_date)
        logger.info(f"Collected {len(google_news_df)} news articles about {title}")
        google_news_df['type'] = title_type  # Add content type column : series or movies
        google_news_df['searched_title'] = title
        all_googlenews_data.extend(google_news_df.to_dict(orient='records'))

    final_df = pd.DataFrame(all_googlenews_data)
    final_df.to_csv(f'{data_directory}/googlenews_{start_date}_{end_date}.csv', index=False) 
    logger.info(f"Collected {len(final_df)} Google News saved to CSV.")

def collect_googlenews(just_watch_date = datetime.now(), start_date=None, end_date=None):
    """
    Collect Google News articles for titles from JustWatch.
    This function reads titles from a CSV file generated by JustWatchCollector,
    collects news articles for each title using GoogleNewsCollector, and saves the results to a CSV file.
    """ 
    # Create data directory if it doesn't exist
    data_directory = 'data'
    if not os.path.exists(data_directory):
        os.makedirs(data_directory)
        logger.info(f"Created directory: {data_directory}")
        
    # Ensure dates are in correct format
    if isinstance(just_watch_date, datetime):
        just_watch_date = just_watch_date.strftime("%Y-%m-%d")
    elif isinstance(just_watch_date, str):
        # Validate the date format
        try:
            datetime.strptime(just_watch_date, "%Y-%m-%d")
        except ValueError:
            logger.error(f"Invalid just_watch_date format: {just_watch_date}. Expected YYYY-MM-DD")
            raise ValueError(f"Invalid date format: {just_watch_date}. Expected YYYY-MM-DD")

    # Get today's date in YYYY-MM-DD format for default values
    today_time = datetime.now()
    today = today_time.strftime("%Y-%m-%d")

    # Handle start_date
    if start_date is None:
        start_date = today
    elif isinstance(start_date, datetime):
        start_date = start_date.strftime("%Y-%m-%d")
    elif isinstance(start_date, str):
        try:
            datetime.strptime(start_date, "%Y-%m-%d")
        except ValueError:
            logger.error(f"Invalid start_date format: {start_date}. Expected YYYY-MM-DD")
            raise ValueError(f"Invalid date format: {start_date}. Expected YYYY-MM-DD")

    # Handle end_date
    if end_date is None:
        end_date = today
    elif isinstance(end_date, datetime):
        end_date = end_date.strftime("%Y-%m-%d")
    elif isinstance(end_date, str):
        try:
            datetime.strptime(end_date, "%Y-%m-%d")
        except ValueError:
            logger.error(f"Invalid end_date format: {end_date}. Expected YYYY-MM-DD")
            raise ValueError(f"Invalid date format: {end_date}. Expected YYYY-MM-DD")
    
    just_watch_csv_filename = f'{data_directory}/justwatch_{just_watch_date}.csv'

    # For each content type (movie/serie) collect news from google news. Here using hidden API.
    all_googlenews_data = []
    google_news_collector = GoogleNewsCollector()
    for index, row in pd.read_csv(just_watch_csv_filename).iterrows():
        title = row['title']
        title_type = row['type']
        if title is None or pd.isna(title):
            logger.warning(f"Skipping row {index} with missing title.")
            continue
            
        
        google_news_df = google_news_collector.count_news_by_date(f"{title_type} {title}", start_date, end_date)
        #logger.info(f"Collected news count about {title}: {google_news_df['count'].sum()}")
        
        google_news_df['type'] = title_type  # Add content type column : series or movies
        google_news_df['searched_title'] = title
        logger.info(f"Collected news count about {title}: {google_news_df}" )
        all_googlenews_data.extend(google_news_df.to_dict(orient='records'))
        
    final_df = pd.DataFrame(all_googlenews_data)
    #final_df.to_csv(f'{data_directory}/googlenews_{start_date}_{end_date}.csv', index=False) 
    logger.info(f"Collected {len(final_df)} Google News saved to CSV.")
    return final_df


df = collect_googlenews(just_watch_date="2025-06-18", start_date="2025-06-18", end_date="2025-06-19")
print(df)


